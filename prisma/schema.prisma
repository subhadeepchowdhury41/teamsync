// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String?         @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  accounts           Account[]
  sessions           Session[]
  projects           Project[]       @relation("ProjectCreator")
  tasks_created      Task[]          @relation("TaskCreator")
  tasks_assigned     Task[]          @relation("TaskAssignee")
  project_members    ProjectMember[]
  notifications      Notification[]  @relation("UserNotifications")
  sent_notifications Notification[]  @relation("NotificationSender")
  comments           Comment[]       @relation("UserComments")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  creator_id  String
  creator     User            @relation("ProjectCreator", fields: [creator_id], references: [id])
  tasks       Task[]
  members     ProjectMember[]
  tags        Tag[]
}

model ProjectMember {
  id         String   @id @default(uuid())
  project_id String
  user_id    String
  role       String   @default("member") // owner, admin, member
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([project_id, user_id])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("todo") // todo, in_progress, completed
  priority    String    @default("medium") // low, medium, high
  due_date    DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  project_id  String
  creator_id  String
  assignee_id String?
  project     Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  creator     User      @relation("TaskCreator", fields: [creator_id], references: [id])
  assignee    User?     @relation("TaskAssignee", fields: [assignee_id], references: [id])
  task_tags   TaskTag[]
  comments    Comment[]
}

model Tag {
  id         String    @id @default(uuid())
  name       String
  color      String?
  project_id String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  project    Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  task_tags  TaskTag[]

  @@unique([name, project_id])
}

model TaskTag {
  task_id    String
  tag_id     String
  created_at DateTime @default(now())
  task       Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([task_id, tag_id])
}

model Notification {
  id          String   @id @default(uuid())
  user_id     String
  sender_id   String?
  type        String
  title       String
  message     String   @db.Text
  read        Boolean  @default(false)
  reference_type String?
  reference_id   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation("UserNotifications", fields: [user_id], references: [id], onDelete: Cascade)
  sender      User?    @relation("NotificationSender", fields: [sender_id], references: [id], onDelete: SetNull)
}

model Comment {
  id         String   @id @default(uuid())
  content    String   @db.Text
  task_id    String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  task       Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)
  user       User     @relation("UserComments", fields: [user_id], references: [id], onDelete: Cascade)
}
