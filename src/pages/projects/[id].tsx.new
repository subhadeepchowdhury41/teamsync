import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useSession, useSupabaseClient } from '@supabase/auth-helpers-react';
import Layout from '@/components/layout/Layout';
import TaskCard from '@/components/tasks/TaskCard';
import TaskForm from '@/components/tasks/TaskForm';
import { Database } from '@/types/supabase';

export default function ProjectDetail() {
  const session = useSession();
  const router = useRouter();
  const { id: projectId } = router.query;
  const supabase = useSupabaseClient<Database>();
  
  const [project, setProject] = useState<any>(null);
  const [tasks, setTasks] = useState<any[]>([]);
  const [members, setMembers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Redirect to sign-in if not authenticated
  useEffect(() => {
    if (session === null) {
      void router.push('/auth/signin');
    }
  }, [session, router]);

  // Fetch project data
  useEffect(() => {
    const fetchProjectData = async () => {
      if (!session?.user || !projectId || typeof projectId !== 'string') return;

      try {
        setLoading(true);
        setError(null);

        // Check if user is a member of this project
        const { data: memberData, error: memberError } = await supabase
          .from('project_members')
          .select('role')
          .eq('project_id', projectId)
          .eq('user_id', session.user.id)
          .single();

        if (memberError && memberError.code !== 'PGRST116') {
          // PGRST116 is "no rows returned" error
          throw memberError;
        }

        if (!memberData) {
          setError('You do not have access to this project');
          setLoading(false);
          return;
        }

        setUserRole(memberData.role);

        // Fetch project details
        const { data: projectData, error: projectError } = await supabase
          .from('projects')
          .select('*')
          .eq('id', projectId)
          .single();

        if (projectError) throw projectError;
        setProject(projectData);

        // Fetch project tasks
        const { data: taskData, error: taskError } = await supabase
          .from('tasks')
          .select(`
            *,
            assignee:assignee_id(id, name, email, avatar_url)
          `)
          .eq('project_id', projectId)
          .order('created_at', { ascending: false });

        if (taskError) throw taskError;
        setTasks(taskData || []);

        // Fetch project members
        const { data: membersData, error: membersError } = await supabase
          .from('project_members')
          .select(`
            role,
            user:user_id(id, name, email, avatar_url)
          `)
          .eq('project_id', projectId);

        if (membersError) throw membersError;
        setMembers(membersData || []);

      } catch (error: any) {
        console.error('Error fetching project data:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    if (session && projectId) {
      void fetchProjectData();
    }
  }, [session, projectId, supabase]);

  // Handle task form success
  const handleTaskFormSuccess = () => {
    setShowTaskForm(false);
    // Refresh tasks
    if (projectId && typeof projectId === 'string') {
      void supabase
        .from('tasks')
        .select(`
          *,
          assignee:assignee_id(id, name, email, avatar_url)
        `)
        .eq('project_id', projectId)
        .order('created_at', { ascending: false })
        .then(({ data, error }) => {
          if (error) {
            console.error('Error refreshing tasks:', error);
            return;
          }
          setTasks(data || []);
        });
    }
  };

  // Show loading state while checking session
  if (session === undefined) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  // If not authenticated, don't render content
  if (session === null) {
    return null;
  }

  return (
    <>
      <Head>
        <title>{project?.name || 'Project'} | TeamSync</title>
        <meta name="description" content="View project details and tasks" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="py-6">
          <div className="mx-auto max-w-7xl px-4 sm:px-6 md:px-8">
            {loading ? (
              <div className="flex justify-center py-8">
                <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
              </div>
            ) : error ? (
              <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-red-700">{error}</p>
                  </div>
                </div>
              </div>
            ) : (
              <>
                {/* Project header */}
                <div className="md:flex md:items-center md:justify-between mb-8">
                  <div className="flex-1 min-w-0">
                    <h1 className="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                      {project?.name}
                    </h1>
                    <p className="mt-1 text-sm text-gray-500">
                      {project?.description || 'No description provided'}
                    </p>
                  </div>
                  <div className="mt-4 flex md:mt-0 md:ml-4">
                    {(userRole === 'owner' || userRole === 'admin') && (
                      <div className="flex space-x-3">
                        <button
                          onClick={() => router.push(`/projects/edit/${projectId}`)}
                          className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        >
                          Edit Project
                        </button>
                        <button
                          onClick={() => router.push(`/projects/team/${projectId}`)}
                          className="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        >
                          Manage Team
                        </button>
                        <button
                          onClick={() => setShowTaskForm(true)}
                          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        >
                          Add Task
                        </button>
                      </div>
                    )}
                  </div>
                </div>

                {/* Project stats */}
                <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3 mb-8">
                  <div className="bg-white overflow-hidden shadow rounded-lg">
                    <div className="px-4 py-5 sm:p-6">
                      <dt className="text-sm font-medium text-gray-500 truncate">Total Tasks</dt>
                      <dd className="mt-1 text-3xl font-semibold text-gray-900">{tasks.length}</dd>
                    </div>
                  </div>
                  <div className="bg-white overflow-hidden shadow rounded-lg">
                    <div className="px-4 py-5 sm:p-6">
                      <dt className="text-sm font-medium text-gray-500 truncate">Completed Tasks</dt>
                      <dd className="mt-1 text-3xl font-semibold text-gray-900">
                        {tasks.filter(task => task.status === 'completed').length}
                      </dd>
                    </div>
                  </div>
                  <div className="bg-white overflow-hidden shadow rounded-lg">
                    <div className="px-4 py-5 sm:p-6">
                      <dt className="text-sm font-medium text-gray-500 truncate">Team Members</dt>
                      <dd className="mt-1 text-3xl font-semibold text-gray-900">{members.length}</dd>
                    </div>
                  </div>
                </div>

                {/* Team members section */}
                <div className="mb-8">
                  <h2 className="text-lg font-medium text-gray-900 mb-4">Team Members</h2>
                  <div className="bg-white shadow overflow-hidden sm:rounded-md">
                    <ul className="divide-y divide-gray-200">
                      {members.map((member, index) => (
                        <li key={index}>
                          <div className="px-4 py-4 sm:px-6">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center">
                                <div className="flex-shrink-0 h-10 w-10">
                                  {member.user.avatar_url ? (
                                    <img
                                      className="h-10 w-10 rounded-full"
                                      src={member.user.avatar_url}
                                      alt={member.user.name}
                                    />
                                  ) : (
                                    <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                                      <span className="text-gray-500 font-medium">
                                        {member.user.name?.charAt(0).toUpperCase() || 'U'}
                                      </span>
                                    </div>
                                  )}
                                </div>
                                <div className="ml-4">
                                  <div className="text-sm font-medium text-gray-900">{member.user.name || 'Unnamed User'}</div>
                                  <div className="text-sm text-gray-500">{member.user.email}</div>
                                </div>
                              </div>
                              <div className="mt-0 flex-shrink-0">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                  member.role === 'owner' ? 'bg-purple-100 text-purple-800' : 
                                  member.role === 'admin' ? 'bg-blue-100 text-blue-800' : 
                                  'bg-green-100 text-green-800'
                                }`}>
                                  {member.role.charAt(0).toUpperCase() + member.role.slice(1)}
                                </span>
                              </div>
                            </div>
                          </div>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                {/* Tasks section */}
                <div>
                  <h2 className="text-lg font-medium text-gray-900 mb-4">Tasks</h2>
                  {tasks.length > 0 ? (
                    <div className="space-y-4">
                      {tasks.map((task) => (
                        <TaskCard
                          key={task.id}
                          id={task.id}
                          title={task.title}
                          description={task.description}
                          status={task.status}
                          priority={task.priority}
                          dueDate={task.due_date}
                          assignee={task.assignee}
                        />
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-12 bg-gray-50 rounded-lg">
                      <svg
                        className="mx-auto h-12 w-12 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        aria-hidden="true"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                        />
                      </svg>
                      <h3 className="mt-2 text-sm font-medium text-gray-900">No tasks</h3>
                      <p className="mt-1 text-sm text-gray-500">Get started by creating a new task.</p>
                      <div className="mt-6">
                        <button
                          onClick={() => setShowTaskForm(true)}
                          className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
                        >
                          <svg
                            className="-ml-1 mr-2 h-5 w-5"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                            aria-hidden="true"
                          >
                            <path
                              fillRule="evenodd"
                              d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                              clipRule="evenodd"
                            />
                          </svg>
                          New Task
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </>
            )}
          </div>
        </div>

        {/* Task form modal */}
        {showTaskForm && (
          <div className="fixed inset-0 z-10 overflow-y-auto">
            <div className="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
              <div className="fixed inset-0 transition-opacity" aria-hidden="true">
                <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
              </div>
              
              <span className="hidden sm:inline-block sm:h-screen sm:align-middle" aria-hidden="true">&#8203;</span>
              
              <div className="inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle">
                <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                  <div className="sm:flex sm:items-start">
                    <div className="mt-3 w-full text-center sm:mt-0 sm:ml-4 sm:text-left">
                      <h3 className="text-lg font-medium leading-6 text-gray-900 mb-4">Add Task</h3>
                      <TaskForm 
                        projectId={projectId as string} 
                        onSuccess={handleTaskFormSuccess} 
                        onCancel={() => setShowTaskForm(false)}
                        availableMembers={members.map(m => ({
                          id: m.user.id,
                          name: m.user.name || 'Unnamed User',
                          email: m.user.email,
                          avatar_url: m.user.avatar_url
                        }))}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </Layout>
    </>
  );
}
